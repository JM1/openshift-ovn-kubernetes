//go:build linux
// +build linux

package cni

import (
	"bytes"
	"fmt"
	"os/exec"

	"github.com/containernetworking/plugins/pkg/ns"
	configv1 "github.com/openshift/api/config/v1"
	"github.com/ovn-org/ovn-kubernetes/go-controller/pkg/config"

	utilnet "k8s.io/utils/net"
)

const baseRestoreDataFmt string = `# Generated by ovnkube-node
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
# Block Machine Config Service
-A FORWARD -p tcp -m tcp --dport 22623 --tcp-flags FIN,SYN,RST,ACK SYN -j REJECT --reject-with %s
-A FORWARD -p tcp -m tcp --dport 22624 --tcp-flags FIN,SYN,RST,ACK SYN -j REJECT --reject-with %s
-A OUTPUT -p tcp -m tcp --dport 22623 --tcp-flags FIN,SYN,RST,ACK SYN -j REJECT --reject-with %s
-A OUTPUT -p tcp -m tcp --dport 22624 --tcp-flags FIN,SYN,RST,ACK SYN -j REJECT --reject-with %s
%s
COMMIT
`

func generateRestoreData(isIPv4 bool) string {
	icmpReject := "icmp6-port-unreachable"

	var appendData string
	if isIPv4 {
		icmpReject = "icmp-port-unreachable"
		metadataServiceIP := "169.254.169.254"
		if config.Kubernetes.PlatformType == string(configv1.AlibabaCloudPlatformType) {
			metadataServiceIP = "100.100.100.200"
		}

		appendData = fmt.Sprintf(`# Block cloud provider metadata IP except DNS
-A FORWARD -d %s -p tcp -m tcp ! --dport 53 -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -d %s -p udp -m udp ! --dport 53 -j REJECT --reject-with icmp-port-unreachable
-A OUTPUT -d %s -p tcp -m tcp ! --dport 53 -j REJECT --reject-with icmp-port-unreachable
-A OUTPUT -d %s -p udp -m udp ! --dport 53 -j REJECT --reject-with icmp-port-unreachable
`, metadataServiceIP, metadataServiceIP, metadataServiceIP, metadataServiceIP)
	}

	return fmt.Sprintf(baseRestoreDataFmt, icmpReject, icmpReject, icmpReject, icmpReject, appendData)
}

// OCP HACK: block access to MCS/metadata; https://github.com/openshift/ovn-kubernetes/pull/19
func setupIPTablesBlocks(netns ns.NetNS, ifInfo *PodInterfaceInfo) error {
	return netns.Do(func(hostNS ns.NetNS) error {
		var hasIPv4, hasIPv6 bool
		for _, ip := range ifInfo.IPs {
			if utilnet.IsIPv6CIDR(ip) {
				hasIPv6 = true
			} else {
				hasIPv4 = true
			}
		}

		args := []string{"--noflush", "--counters", "-w", "5"}
		if hasIPv4 {
			restoreData := generateRestoreData(true)
			cmd := exec.Command("iptables-restore", args...)
			cmd.Stdin = bytes.NewBuffer([]byte(restoreData))
			out, err := cmd.CombinedOutput()
			if err != nil {
				return fmt.Errorf("could not set up pod iptables rules: %s", string(out))
			}
		}
		if hasIPv6 {
			restoreData := generateRestoreData(false)
			cmd := exec.Command("ip6tables-restore", args...)
			cmd.Stdin = bytes.NewBuffer([]byte(restoreData))
			out, err := cmd.CombinedOutput()
			if err != nil {
				return fmt.Errorf("could not set up pod ip6tables rules: %s", string(out))
			}
		}

		return nil
	})
}

// END OCP HACK
